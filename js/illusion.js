// Generated by CoffeeScript 1.8.0
(function() {
  var Illusion, root,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  Illusion = (function() {
    function Illusion(elem, callback) {
      this.callback = callback != null ? callback : null;
      this._loadCallback = __bind(this._loadCallback, this);
      this.space = 1;
      this.speed = 7;
      this.gif = new SuperGif({
        gif: elem,
        auto_play: false
      });
      this.gif.load(this._loadCallback);
    }

    Illusion.prototype.remove = function() {
      return this.elem.parentNode.removeChild(this.elem);
    };

    Illusion.prototype.play = function() {
      if (this.playing) {
        return;
      }
      this.playing = true;
      if (this.speed < 1) {
        this.speed = 1;
      }
      return this.timer = setInterval((function(_this) {
        return function() {
          var x;
          x = parseInt(_this.maskCanvas.style.left);
          if (x < _this.width * 2) {
            return _this.maskCanvas.style.left = "" + (x + _this.space) + "px";
          } else {
            return _this.maskCanvas.style.left = '0px';
          }
        };
      })(this), 500 / this.speed);
    };

    Illusion.prototype.pause = function() {
      this.playing = false;
      return clearInterval(this.timer);
    };

    Illusion.prototype._loadCallback = function() {
      var canvas, ctx, el, _i, _len, _ref;
      this.lineWidth = this.space * (this.gif.get_length() - 1);
      canvas = this.gif.get_canvas();
      canvas.width *= this.space;
      canvas.height *= this.space;
      this.width = canvas.width;
      this.height = canvas.height;
      ctx = canvas.getContext('2d');
      ctx.scale(this.space, this.space);
      ctx.imageSmoothingEnabled = false;
      this._drawImage();
      this._drawMask();
      this.elem = document.createElement('div');
      _ref = [this.maskCanvas, this.imageCanvas];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        el = _ref[_i];
        this.elem.appendChild(el);
      }
      this.elem.style.position = 'relative';
      this.elem.style.top = '50%';
      this.elem.style.marginTop = "" + (-this.height / 2) + "px";
      this.elem.style.marginLeft = "" + (-this.width) + "px";
      this.elem.ondragover = function(e) {
        return e.preventDefault();
      };
      this.elem.ondrop = (function(_this) {
        return function(e) {
          var file, reader;
          e.preventDefault();
          file = e.dataTransfer.files[0];
          reader = new FileReader;
          reader.readAsArrayBuffer(file);
          return reader.onload = function() {
            var arr;
            arr = new Uint8Array(reader.result);
            _this.remove();
            return _this.gif.load_raw(arr, _this._loadCallback);
          };
        };
      })(this);
      if (this.callback) {
        return this.callback(this.elem);
      }
    };

    Illusion.prototype._drawImage = function() {
      var ctx, gifCtx, i, imageData, x, _i, _ref, _results;
      this.imageCanvas = document.createElement('canvas');
      this.imageCanvas.width = this.width;
      this.imageCanvas.height = this.height;
      this.imageCanvas.style.zIndex = -1;
      gifCtx = this.gif.get_canvas().getContext('2d');
      ctx = this.imageCanvas.getContext('2d');
      ctx.imageSmoothingEnabled = false;
      _results = [];
      for (i = _i = 0, _ref = this.gif.get_length(); 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        this.gif.move_to(i);
        x = this.lineWidth + i * this.space;
        _results.push((function() {
          var _results1;
          _results1 = [];
          while (x < this.imageCanvas.width) {
            imageData = gifCtx.getImageData(x, 0, this.space, this.height);
            ctx.putImageData(imageData, x, 0);
            _results1.push(x += this.space + this.lineWidth);
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Illusion.prototype._drawMask = function() {
      var ctx, i, imageData, x, _i, _ref;
      this.maskCanvas = document.createElement('canvas');
      this.maskCanvas.width = this.width;
      this.maskCanvas.height = this.height;
      ctx = this.maskCanvas.getContext('2d');
      ctx.imageSmoothingEnabled = false;
      imageData = ctx.createImageData(this.lineWidth, this.maskCanvas.height);
      for (i = _i = 0, _ref = imageData.data.length; _i < _ref; i = _i += 4) {
        imageData.data[i + 0] = 0;
        imageData.data[i + 1] = 0;
        imageData.data[i + 2] = 0;
        imageData.data[i + 3] = 255;
      }
      x = 0;
      while (x < this.maskCanvas.width) {
        ctx.putImageData(imageData, x, 0);
        x += this.lineWidth + this.space;
      }
      return new Draggabilly(this.maskCanvas);
    };

    return Illusion;

  })();

  root.Illusion = Illusion;

}).call(this);

//# sourceMappingURL=illusion.js.map
